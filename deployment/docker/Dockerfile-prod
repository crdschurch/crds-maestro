# Stage 0 , based on elixir
FROM elixir:1.6.3 AS build

ENV DEBIAN_FRONTEND=noninteractive

# install the Phoenix Mix archive
ENV PHOENIX_VERSION 1.1.6
RUN mix archive.install --force https://github.com/phoenixframework/archives/raw/master/phoenix_new-$PHOENIX_VERSION.ez

# Install NodeJS 6.x, NPM, and bower
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - && \
  apt-get install -yq nodejs build-essential inotify-tools debconf

# environment variable MIX_ENV (needed pre npm and mix)
ARG MIX_ENV=prod
ENV MIX_ENV=prod

# Install dependencies first so this layer can cache
COPY ./mix.exs /maestro/
COPY ./mix.lock /maestro/
COPY ./apps/crossroads_interface/mix.exs /maestro/apps/crossroads_interface/
COPY ./apps/crossroads_interface/mix.lock /maestro/apps/crossroads_interface/
COPY ./apps/crossroads_interface/package.json /maestro/apps/crossroads_interface/
COPY ./apps/crossroads_interface/package-lock.json /maestro/apps/crossroads_interface/
RUN cd maestro && mix local.hex --force && mix local.rebar --force && mix deps.get
RUN cd /maestro/apps/crossroads_interface && npm install && cd /maestro

# build-process environment variables
ARG CRDS_APP_CLIENT_ENDPOINT
ARG CRDS_CMS_CLIENT_ENDPOINT
ARG CRDS_CMS_SERVER_ENDPOINT
ARG CRDS_COOKIE_DOMAIN
ARG CRDS_ENV
ARG CRDS_GATEWAY_CLIENT_ENDPOINT
ARG CRDS_GATEWAY_SERVER_ENDPOINT
ARG CRDS_MP_BASE_URL
ARG CRDS_STREAMSPOT_API_KEY
ARG CRDS_STREAMSPOT_SSID
ARG CRDS_GOOGLE_API_KEY
ARG CRDS_ROLLCALL_FORM_ID
ARG MAESTRO_HOSTNAME
ARG MAESTRO_NAME_EXTENSION
ARG ROBOTS_TXT_FILENAME
ARG MAESTRO_PORT
ARG TIMEZONE

# Set Time Zone
RUN unlink /etc/localtime \
  && ln -s "/usr/share/zoneinfo/${TIMEZONE}" /etc/localtime

# Copy Maestro code
COPY ./ /maestro

# Set working directory
WORKDIR /maestro

# Move requested robots file
RUN mkdir apps/crossroads_interface/priv/static/ -p \
  && mv apache/${ROBOTS_TXT_FILENAME} apps/crossroads_interface/priv/static/

# Copy micro clients
RUN mkdir apps/crossroads_interface/priv/static/js -p \
  && cp -r microclients/* apps/crossroads_interface/priv/static/js/

# Build Maestro JavaScript
RUN cd apps/crossroads_interface && ./node_modules/brunch/bin/brunch build --production

# Run Maestro Unit Tests
RUN cd apps/crossroads_interface && MIX_ENV=test mix deps.get && MIX_ENV=test mix test

# Run Maestro JavaScript Unit Tests
RUN cd apps/crossroads_interface && npm run test

# Make sure
RUN mix deps.get 

# compile, digest, release Maestro
RUN cd /maestro \
  && touch /maestro/apps/crossroads_interface/mix.exs \
  && /usr/local/bin/mix compile \
  && /usr/local/bin/mix phoenix.digest \
  && /usr/local/bin/mix release --env=prod

# Stage 1, based on debian stretch
FROM debian:stretch

# Install nginx - NOTE: We could consider using nginx as the base image but it uses debian:stretch-slim insead of debian:stretch
ENV NGINX_VERSION 1.13.12-1~stretch
ENV NJS_VERSION   1.13.12.0.2.0-1~stretch

RUN set -x \
	&& apt-get update \
	&& apt-get install --no-install-recommends --no-install-suggests -y gnupg1 apt-transport-https ca-certificates \
	&& \
	NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
	found=''; \
	for server in \
		ha.pool.sks-keyservers.net \
		hkp://keyserver.ubuntu.com:80 \
		hkp://p80.pool.sks-keyservers.net:80 \
		pgp.mit.edu \
	; do \
		echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
		apt-key adv --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$NGINX_GPGKEY" && found=yes && break; \
	done; \
	test -z "$found" && echo >&2 "error: failed to fetch GPG key $NGINX_GPGKEY" && exit 1; \
	apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \
	&& dpkgArch="$(dpkg --print-architecture)" \
	&& nginxPackages=" \
		nginx=${NGINX_VERSION} \
		nginx-module-xslt=${NGINX_VERSION} \
		nginx-module-geoip=${NGINX_VERSION} \
		nginx-module-image-filter=${NGINX_VERSION} \
		nginx-module-njs=${NJS_VERSION} \
	" \
	&& case "$dpkgArch" in \
		amd64|i386) \
# arches officialy built by upstream
			echo "deb https://nginx.org/packages/mainline/debian/ stretch nginx" >> /etc/apt/sources.list.d/nginx.list \
			&& apt-get update \
			;; \
		*) \
# we're on an architecture upstream doesn't officially build for
# let's build binaries from the published source packages
			echo "deb-src https://nginx.org/packages/mainline/debian/ stretch nginx" >> /etc/apt/sources.list.d/nginx.list \
			\
# new directory for storing sources and .deb files
			&& tempDir="$(mktemp -d)" \
			&& chmod 777 "$tempDir" \
# (777 to ensure APT's "_apt" user can access it too)
			\
# save list of currently-installed packages so build dependencies can be cleanly removed later
			&& savedAptMark="$(apt-mark showmanual)" \
			\
# build .deb files from upstream's source packages (which are verified by apt-get)
			&& apt-get update \
			&& apt-get build-dep -y $nginxPackages \
			&& ( \
				cd "$tempDir" \
				&& DEB_BUILD_OPTIONS="nocheck parallel=$(nproc)" \
					apt-get source --compile $nginxPackages \
			) \
# we don't remove APT lists here because they get re-downloaded and removed later
			\
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)
			&& apt-mark showmanual | xargs apt-mark auto > /dev/null \
			&& { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; } \
			\
# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)
			&& ls -lAFh "$tempDir" \
			&& ( cd "$tempDir" && dpkg-scanpackages . > Packages ) \
			&& grep '^Package: ' "$tempDir/Packages" \
			&& echo "deb [ trusted=yes ] file://$tempDir ./" > /etc/apt/sources.list.d/temp.list \
# work around the following APT issue by using "Acquire::GzipIndexes=false" (overriding "/etc/apt/apt.conf.d/docker-gzip-indexes")
#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)
#   ...
#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)
			&& apt-get -o Acquire::GzipIndexes=false update \
			;; \
	esac \
	\
	&& apt-get install --no-install-recommends --no-install-suggests -y \
						$nginxPackages \
						gettext-base \
	&& apt-get remove --purge --auto-remove -y apt-transport-https ca-certificates && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \
	\
# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)
	&& if [ -n "$tempDir" ]; then \
		apt-get purge -y --auto-remove \
		&& rm -rf "$tempDir" /etc/apt/sources.list.d/temp.list; \
	fi

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 80

# Copy nginx config
COPY ./deployment/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application over from build stage
COPY --from=build /maestro/_build/prod/rel/crossroads_interface /maestro

# Set UTF-8 encoding
ENV LANG=C.UTF-8

COPY ./deployment/entrypoint.sh /

# Run entrypoint
ENTRYPOINT  chmod u+x entrypoint.sh && ./entrypoint.sh